// Package mgmtapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package mgmtapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
